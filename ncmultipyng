#! /usr/bin/python2

#######################################################################
# This file is part of ncmultipyng
#
# Copyright (C) 2014 Nicolas Pillot
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#######################################################################

import argparse
import re
import subprocess
import time
import os
import collections
import curses
import sys

#######################################################################
# Target host
#######################################################################

# host class to store target information
class Host:

	# only last MAX_SAMPLES are kept
	_MAX_SAMPLES = 200

	# ipv4 and ipv6 regexp courtesy of
	# http://www.sroze.io/2008/10/09/regex-ipv4-et-ipv6/
	_pattern_ipv4 = (
		"("
			"(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\."
			"(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\."
			"(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\."
			"(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)"
		")"
	)
	_pattern_ipv6 = (
		"("
			"("
				"([0-9A-Fa-f]{1,4}:){7}"
				"[0-9A-Fa-f]{1,4}"
			")|"
			"("
				"([0-9A-Fa-f]{1,4}:){6}"
				":"
				"[0-9A-Fa-f]{1,4}"
			")|"
			"("
				"([0-9A-Fa-f]{1,4}:){5}"
				":"
				"([0-9A-Fa-f]{1,4}:)?"
				"[0-9A-Fa-f]{1,4}"
			")|"
			"("
				"([0-9A-Fa-f]{1,4}:){4}"
				":"
				"([0-9A-Fa-f]{1,4}:){0,2}"
				"[0-9A-Fa-f]{1,4}"
			")|"
			"("
				"([0-9A-Fa-f]{1,4}:){3}"
				":"
				"([0-9A-Fa-f]{1,4}:){0,3}"
				"[0-9A-Fa-f]{1,4}"
			")|"
			"("
				"([0-9A-Fa-f]{1,4}:){2}"
				":"
				"([0-9A-Fa-f]{1,4}:){0,4}"
				"[0-9A-Fa-f]{1,4}"
			")|"
			"("
				"([0-9A-Fa-f]{1,4}:){6}"
				"((b((25[0-5])|(1d{2})|(2[0-4]d)|(d{1,2}))b).){3}"
				"(b((25[0-5])|(1d{2})|(2[0-4]d)|(d{1,2}))b)"
			")|"
			"("
				"([0-9A-Fa-f]{1,4}:){0,5}:"
				"((b((25[0-5])|(1d{2})|(2[0-4]d)|(d{1,2}))b).){3}"
				"(b((25[0-5])|(1d{2})|(2[0-4]d)|(d{1,2}))b)"
			")|"
			"("
				"::"
				"([0-9A-Fa-f]{1,4}:){0,5}"
				"((b((25[0-5])|(1d{2})|(2[0-4]d)|(d{1,2}))b).){3}"
				"(b((25[0-5])|(1d{2})|(2[0-4]d)|(d{1,2}))b)"
			")|"
			"("
				"[0-9A-Fa-f]{1,4}"
				"::"
				"([0-9A-Fa-f]{1,4}:){0,5}"
				"[0-9A-Fa-f]{1,4}"
			")|"
			"("
				"::"
				"([0-9A-Fa-f]{1,4}:){0,6}"
				"[0-9A-Fa-f]{1,4}"
			")|"
			"("
				"([0-9A-Fa-f]{1,4}:){1,7}"
				":"
			")"
		")"
	)
	_re_ipv4 = re.compile(_pattern_ipv4 + "$")
	_re_ipv6 = re.compile(_pattern_ipv6 + "$", re.IGNORECASE)

	# constructor
	def __init__(self, string):
		self.address = None
		self.version = None
		self.results = collections.deque()
		self._process = None
		self._nextpoll = None
		self._parse_ip(string)

	# print
	def __repr__(self):
		return "Host(address=%s,version=%s)" % (self.address, self.version)

	# parse ip
	def _parse_ip(self, string):
		result = self._re_ipv4.match(string)
		if result is not None:
			self.version = 4
			self.address = result.group()
			return
		result = self._re_ipv6.match(string)
		if result is not None:
			self.version = 6
			self.address = result.group()
			return
		message = "%s is not a valid host definition" % string
		raise argparse.ArgumentTypeError(message)

	# return code
	def _get_return_code(self):
		if self._process is None:
			return None
		else:
			return self._process.poll()

	# check polling interval
	def _is_ready(self, timeout):
		curtime = time.time()
		if self._nextpoll is not None and curtime < self._nextpoll:
			return False
		self._nextpoll = curtime + timeout
		return True

	# store result
	def _store_sample(self, retcode):
		self.results.appendleft(retcode);
		while len(self.results) > Host._MAX_SAMPLES:
			self.results.pop()

	# spawn process
	def _spawn_process(self, timeout):
		if self.version == 6:
			cmd = "ping6"
		else:
			cmd = "ping"
		if timeout <= 0:
			timeout = 1
		params = [
			cmd,
			"-q", "-n",
			"-W", str(timeout),
			"-c", "1",
			self.address
		]
		with open(os.devnull, "w") as f:
			self._process = subprocess.Popen(params,stdout=f,stderr=f)

	# run
	def run(self, timeout):
		retcode = self._get_return_code()
		# it just finished, clear and store
		if retcode is not None:
			self._process = None
			self._store_sample(retcode)
		# spawn if not running and interval passed
		if self._process is None and self._is_ready(timeout):
			self._spawn_process(timeout)

	# get minimum size
	def _get_minimum_display_size(self):
		return len(self.address) + 1 + Host.show_min_num_sample

	# display host, constraining to w chars
	def display(self, win, w):
		# if not enough space, draw placeholder
		if w < self._get_minimum_display_size():
				win.addstr("x" * w)
				return
		# see how much room we have for samples
		room = w - len(self.address) - 1
		win.addstr(self.address)
		win.addstr(" ")
		for result in self.results:
			if result == 0:
				win.addstr("!", Interface.style_ping_success)
			else:
				win.addstr(".", Interface.style_ping_failed)
			room -= 1
			if room == 0:
				break;

#######################################################################
# Command line arguments
#######################################################################

class Arguments:

	def range_integer(self, parser, string, name, mini=None, maxi=None):
		value = int(string)
		if mini is not None and value < mini:
			parser.error(
				"%s=%s is below the minimum value of %i"
				% (name, string, mini)
			)
		if maxi is not None and value > maxi:
			parser.error(
				"%s=%s is above the maximum value of %i"
				% (name, string, maxi)
			)
		return value

	def __init__(self):
		parser = argparse.ArgumentParser()
		parser.add_argument(
			"host",
			help = "target host definition (IPv4/IPv6)",
			action = "store",
			nargs = "+",
			type = lambda x: Host(x)
		)
		parser.add_argument(
			"-i",
			help = "polling interval in seconds",
			action = "store",
			default = 3,
			type = lambda x:
				self.range_integer(
					parser, x,
					"-i interval", 1, None
				)
		)
		parser.add_argument(
			"-n",
			help = "minimum number of samples to display",
			action = "store",
			default = 5,
			type = lambda x:
				self.range_integer(
					parser, x,
					"-n numsamples", 1, None
				)
		)
		parser.add_argument(
			"-r",
			help = "ncurses interface refresh delay in milliseconds",
			action = "store",
			default = 200,
			type = lambda x:
				self.range_integer(
					parser, x,
					"-r refresh_delay_in_ms", 0, None
				)
		)
		self._data = parser.parse_args()

	# print
	def __repr__(self):
		return "Arguments=%s" % self._data

#######################################################################       
# Interface
#######################################################################

class Interface:

	# constructor
	def __init__(self, win, args):
		# display configuration
		self._stdscr = win
		self._stdscr.nodelay(True)
		curses.curs_set(False)
		curses.use_default_colors()
		# display colors
		self._setup_colors()
		# display variable
		self._program_name = os.path.basename(__file__)

	# initialize our colors
	def _setup_colors(self):
		# hotkey indicator
		curses.init_pair(1,curses.COLOR_YELLOW, -1)
		Interface.style_first_letter = curses.color_pair(1)
		# failed ping
		curses.init_pair(2, -1, curses.COLOR_RED)
		Interface.style_ping_failed = curses.color_pair(2)
		# success ping
		curses.init_pair(3, -1, curses.COLOR_GREEN)
		Interface.style_ping_success = curses.color_pair(3)

	# handle input
	def _handle_input(self):
		key = self._stdscr.getch()
		if key == curses.ERR:
			pass
		elif key == ord('q'):
			sys.exit(0)

	# decoration
	def _draw_decoration(self, h, w):
		self._stdscr.box()
		self._stdscr.move(0,1)
		self._stdscr.addstr(self._program_name, curses.A_BOLD)
		self._stdscr.move(h-1,1)
		self._stdscr.addstr("q", Interface.style_first_letter | curses.A_BOLD)
		self._stdscr.addstr("uit")
		winsize = "%s,%s" % (h, w)
		self._stdscr.addstr(h-1, w-len(winsize)-1, winsize)

	# display screen with one host per line
	def _display_linear(self, h, w, hosts):
		line = 1
		for host in hosts:
			if line == h - 1:
				break
			self._stdscr.move(line,1)
			host.display(self._stdscr, w - 2)
			line = line + 1

	# sleep for a while
	def _sleep(self):
		curses.napms(self.interval_ui)

	# interface cycle
	def update(self, hosts):
		h, w = self._stdscr.getmaxyx()
		self._handle_input()
		self._stdscr.clear()
		self._draw_decoration(h,w)
		self._display_linear(h, w, hosts)
		self._stdscr.refresh()
		self._sleep()

#######################################################################
# Application
#######################################################################

class Application:

	# constructor
	def __init__(self, win, args):
		# variables
		self._hosts = args.host
		self._interface = Interface(win, args)
		# parameters
		Application.interval_ping = args.i
		Interface.interval_ui = args.r
		Host.show_min_num_sample = args.n

	# main loop
	def run(self):
		while True:
			for host in self._hosts:
				host.run(Application.interval_ping)
			self._interface.update(self._hosts)

#######################################################################
# main
#######################################################################

def main(win, args):
	app = Application(win, args._data)
	app.run()

try:
	args = Arguments()
	curses.wrapper(main, args)
except (KeyboardInterrupt, SystemExit):
	pass
